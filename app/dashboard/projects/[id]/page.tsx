import { notFound } from "next/navigation"
import { getProject } from "@/app/actions/project-actions"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ProjectTasksList } from "@/components/project-tasks-list"
import { CalendarIcon, Clock, Code2, ExternalLink, FileText, Layers } from "lucide-react"
import { formatDate } from "@/lib/utils"

export default async function ProjectPage({ params }: { params: { id: string } }) {
  const { project, tasks, resources } = await getProject(params.id)

  if (!project) {
    notFound()
  }

  const statusColors: Record<string, string> = {
    Planning: "bg-blue-500",
    "In Progress": "bg-yellow-500",
    Completed: "bg-green-500",
    Cancelled: "bg-red-500",
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">{project.name}</h1>
          <div className="flex items-center gap-2 mt-2">
            <Badge variant="outline" className="text-sm">
              {project.project_type?.replace("-", " ").replace(/\b\w/g, (l) => l.toUpperCase())}
            </Badge>
            <Badge
              className={`${statusColors[project.status] || "bg-gray-500"} hover:${
                statusColors[project.status] || "bg-gray-600"
              }`}
            >
              {project.status}
            </Badge>
          </div>
        </div>
        <Button variant="outline">Edit Project</Button>
      </div>

      <div className="grid gap-6 md:grid-cols-2">
        <Card>
          <CardHeader>
            <CardTitle>Project Details</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <h3 className="font-medium flex items-center gap-2">
                <FileText className="h-4 w-4" /> Description
              </h3>
              <p className="text-sm text-muted-foreground mt-1">{project.description}</p>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <h3 className="font-medium flex items-center gap-2">
                  <CalendarIcon className="h-4 w-4" /> Due Date
                </h3>
                <p className="text-sm text-muted-foreground mt-1">
                  {project.due_date ? formatDate(project.due_date) : "Not set"}
                </p>
              </div>
              <div>
                <h3 className="font-medium flex items-center gap-2">
                  <Clock className="h-4 w-4" /> Estimated Time
                </h3>
                <p className="text-sm text-muted-foreground mt-1">{project.estimated_time || "Not estimated"}</p>
              </div>
            </div>
            <div>
              <h3 className="font-medium flex items-center gap-2">
                <Code2 className="h-4 w-4" /> Tech Stack
              </h3>
              <div className="flex flex-wrap gap-2 mt-1">
                {project.tech_stack?.map((tech: string, index: number) => (
                  <Badge key={index} variant="secondary">
                    {tech}
                  </Badge>
                ))}
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>AI Project Breakdown</CardTitle>
            <CardDescription>Generated by Gemini AI</CardDescription>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground whitespace-pre-line">{project.ai_breakdown}</p>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="tasks">
        <TabsList>
          <TabsTrigger value="tasks">Tasks</TabsTrigger>
          <TabsTrigger value="resources">Resources</TabsTrigger>
        </TabsList>
        <TabsContent value="tasks" className="mt-4">
          <ProjectTasksList projectId={project.id} initialTasks={tasks} />
        </TabsContent>
        <TabsContent value="resources" className="mt-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Layers className="h-5 w-5" /> Learning Resources
              </CardTitle>
              <CardDescription>Helpful resources for your project</CardDescription>
            </CardHeader>
            <CardContent>
              {resources && resources.length > 0 ? (
                <div className="space-y-4">
                  {resources.map((resource: any) => (
                    <div key={resource.id} className="border rounded-lg p-4">
                      <h3 className="font-medium flex items-center gap-2">
                        <ExternalLink className="h-4 w-4" />
                        <a
                          href={resource.url}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-blue-600 hover:underline"
                        >
                          {resource.title}
                        </a>
                      </h3>
                      <p className="text-sm text-muted-foreground mt-1">{resource.description}</p>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-6">
                  <p className="text-muted-foreground">No resources available for this project</p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}
